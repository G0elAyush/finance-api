/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.64).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.myapp.restapi.user;

import java.util.ArrayList;

import org.springframework.hateoas.EntityModel;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ProblemDetail;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.fasterxml.jackson.annotation.JsonView;
import com.myapp.restapi.core.PaginatedResponse;
import com.myapp.restapi.util.beanvalidation.ValidationGroups;
import com.myapp.restapi.util.beanvalidation.Views;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;

@Validated
@RequestMapping(value = "/user")
public interface UserApi {
	
	//create request
	
	@JsonView(Views.Create.class)
	@Operation(summary = "Create user", description = "This api is used to create a new user to the applciaiton ", tags = {
			"User Resource" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Successful Creation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Void.class))),
			@ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class))),
			@ApiResponse(responseCode = "409", description = "Duplicate user name", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class))),
			@ApiResponse(responseCode = "415", description = "Unsupported Media Typ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class))),
			@ApiResponse(responseCode = "500", description = "Internal Service Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class))) })
	@PostMapping(consumes = { MediaType.APPLICATION_JSON_VALUE },produces = { MediaType.APPLICATION_JSON_VALUE })
	ResponseEntity<UserDTO> createUser(
			@RequestHeader(HttpHeaders.ACCEPT_LANGUAGE) String lang, 
			@Validated(ValidationGroups.CreatePlusDefault.class) @RequestBody UserDTO body) throws Throwable;
	
	
	//create bulk
	
	@JsonView(Views.Create.class)
	@Operation(summary = "Creates list of users with given input array", description = "Creates list of users with given input array", tags = {"User Resource" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Successful Operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Void.class))),
			@ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class))) })
	@PostMapping(value = "/batchcreate", consumes = { MediaType.APPLICATION_JSON_VALUE },produces = { MediaType.APPLICATION_JSON_VALUE })
	ResponseEntity<ArrayList<UserDTO>> createUsersWithListInput(
			@RequestHeader(HttpHeaders.ACCEPT_LANGUAGE) String lang,
			@Validated(ValidationGroups.CreatePlusDefault.class) @RequestBody  ArrayList<@Valid UserDTO> body) throws Throwable;
	
	// delete request
	
	@Operation(summary = "Delete user by userName", description = "Delete user", tags = { "User Resource" })
	@ApiResponses(value = { @ApiResponse(responseCode = "204", description = "Successful Operation",content = @Content(mediaType = "application/json", schema = @Schema(implementation = Void.class))),
			@ApiResponse(responseCode = "404", description = "User not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class))),
			@ApiResponse(responseCode = "500", description = "Internal Service Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class))) })
	@DeleteMapping(value = "/{username}")
	ResponseEntity<Void> deleteUserByUserName(@RequestHeader(HttpHeaders.ACCEPT_LANGUAGE) String lang,
			@Parameter(in = ParameterIn.PATH, description = "userName to delete", required = true, schema = @Schema()) @PathVariable String username)
			throws Throwable;
	
	
	//view single request
	
	@JsonView(Views.View.class)
	@Operation(summary = "Get user by userName", description = "Get user by userName", tags = { "User Resource" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Successful Operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserDTO.class))),
			@ApiResponse(responseCode = "404", description = "User not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class))),
			@ApiResponse(responseCode = "500", description = "Internal Service Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class)))})
	@GetMapping(value = "/{username}",produces = { MediaType.APPLICATION_JSON_VALUE })
	EntityModel<UserDTO> findByUserName(
			@RequestHeader(HttpHeaders.ACCEPT_LANGUAGE) String lang,
			@Parameter(in = ParameterIn.PATH, description = "UserName to view ", required = true, schema = @Schema()) @PathVariable String username) throws Throwable;
	
	//view bulk request
	
	@JsonView(Views.View.class)
	@Operation(summary = "Get user list", description = "Get all the users in list", tags = { "User Resource" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Successful Operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PaginatedResponse.class))),
			@ApiResponse(responseCode = "400", description = "Invalid parameter supplied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class))),
			@ApiResponse(responseCode = "500", description = "Internal Service Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class))) })
	@GetMapping(produces = { MediaType.APPLICATION_JSON_VALUE })
	EntityModel<PaginatedResponse<UserDTO>> getAllUsers(
			@RequestHeader(HttpHeaders.ACCEPT_LANGUAGE) String lang,
			@Parameter(in = ParameterIn.QUERY, description = "Page Numer to fetch", schema = @Schema(defaultValue = "0")) @Valid @RequestParam(required = false, defaultValue = "0") Integer page,
			@Parameter(in = ParameterIn.QUERY, description = "No of records in each page", schema = @Schema(defaultValue = "5")) @Valid @RequestParam(required = false, defaultValue = "5") Integer size,
			@Parameter(in = ParameterIn.QUERY, description = "Attibute to sort", schema = @Schema(defaultValue = "id")) @Valid @RequestParam(required = false, defaultValue = "id") String sortBy,
			@Parameter(in = ParameterIn.QUERY, description = "Sort order asc/desc", schema = @Schema(defaultValue = "desc")) @Valid @RequestParam(required = false, defaultValue = "desc") String sortOrder
	) throws Throwable;

	
	

	/*@Operation(summary = "Update user", description = "Update User Details.", tags = { "User Resource" })
	@ApiResponses(value = { @ApiResponse(responseCode = "204", description = "successful operation"),
			@ApiResponse(responseCode = "400", description = "Invalid parameter supplied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))),
			@ApiResponse(responseCode = "404", description = "User not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))),
			@ApiResponse(responseCode = "500", description = "Internal Service Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))) })
	@PutMapping(value = "/{username}", consumes = { "application/json", "application/x-www-form-urlencoded" })
	ResponseEntity<Void> updateUser(
			@Parameter(in = ParameterIn.PATH, description = "name that need to be deleted", required = true, schema = @Schema()) @PathVariable String username,
			@Parameter(in = ParameterIn.DEFAULT, description = "Update an existent user in the store", schema = @Schema()) @Valid @RequestBody User body)
			throws EntityNotFoundException;


	
*/
}
